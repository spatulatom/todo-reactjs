{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","console","log","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd37ab0d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// another way of writnig props is:\r\n// const Form = (props) => {\r\n  // and then whenever you need props you go:\r\n  // prop.todos etc\r\n  \r\n\r\nconst Form = ({setInputText,todos,setTodos,inputText,setStatus}) =>{\r\n    // here we can js code and function\r\n    const inputTextHandler=(e) =>{\r\n        setInputText(e.target.value);\r\n    }\r\n    const submitTodoHandler = (e) =>{\r\n        e.preventDefault();\r\n        setTodos([\r\n          // ...todos means that if there are any todos - pass them along,\r\n    // as wthat after coma we spacify what's next\r\n            ...todos,\r\n            {text:inputText, completed:false, id: Math.random() *1000}\r\n        ]);\r\n        setInputText(\"\");\r\n    };\r\n    console.log(todos);\r\n    const statusHandler = (e) => {\r\n      setStatus(e.target.value)\r\n    }\r\n    \r\n    return(  \r\n        <form>\r\n      <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n         \r\n    )    }\r\n  export default Form; ","import React from 'react';\r\n\r\n\r\n\r\nconst Todo = ({text, todo, todos,setTodos}) => {\r\n// Events\r\nconst deleteHandler = () =>{\r\n    // its filtring the state out of element that matches the id, and gets rid of that element\r\n    // console.log(todo)\r\n    setTodos(todos.filter(el=> el.id !== todo.id))\r\n    } \r\n    const completeHandler = () =>  {\r\n        setTodos(todos.map((item)=>{\r\n            if(item.id===todo.id){\r\n                return{\r\n                    ...item, completed: !item.completed\r\n                    // return of the other properties of todo and modify completed\r\n                }\r\n            }\r\n            return item;\r\n        }))\r\n    }; \r\n\r\n  return (\r\n     <div className=\"todo\">\r\n         <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`} >{text}</li>\r\n         <button onClick={completeHandler} className=\"complete-btn\"><i className=\"fas fa-check\"></i></button>\r\n         <button onClick={deleteHandler } className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>\r\n     </div>\r\n  );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\r\n// Import Components\r\nimport Todo from './Todo'\r\n\r\n\r\nconst TodoList = ({todos, setTodos, filteredTodos}) => {\r\n  // console.log(todos);\r\n    \r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map(todo=>(\r\n          <Todo setTodos={setTodos} todos={todos} text={todo.text} key={todo.id} todo={todo}/>\r\n        ))} \r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, {useState, useEffect} from 'react';\n \nimport './App.css';\n// Importing components\nimport Form from './components/Form'\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  \n  // State suff\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const[filteredTodos, setFilteredTodos] = useState([]);\n\n// run once when the app starts\n useEffect(()=>{\n   getLocalTodos();},[]\n );\n  // useEffect. empty array-function will run only once when component first rendered.\n  // the power of this function is that \n  useEffect(()=>{\n    filterHandler();\n    saveLocalTodos();\n    },[todos, status]\n  );\n   \n  // Functions\n  const filterHandler = () => {\n    switch(status){\n      case 'completed':\n        setFilteredTodos(todos.filter((todo)=>todo.completed===true))\n        break;\n        case \"uncompleted\":\n        setFilteredTodos(todos.filter((todo)=>todo.completed===false))\n        break;\n        default: \n        setFilteredTodos(todos);\n        break;\n    }\n  }\n  // Save to local\nconst saveLocalTodos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\nconst getLocalTodos = () =>{\n  if (localStorage.getItem(\"todos\")===null) {\n    localStorage.setItem(\"todos\", JSON.stringify([]));\n  }else{\n    let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n    setTodos(todoLocal);\n  }\n}\n\n  return (\n    <div className=\"App\">\n      <header>\n  <h1>React</h1>\n      </header>\n      <Form inputText={inputText}  todos={todos} setTodos={setTodos} setInputText={setInputText}\n      setStatus={setStatus}  />\n      <TodoList todos={todos} setTodos={setTodos} filteredTodos={filteredTodos}/>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}